import numpy as np
import matplotlib.pyplot as plt

class ConformalFieldTheory:
    def __init__(self, num_fields=2, num_points=100):
        self.num_fields = num_fields
        self.num_points = num_points
        self.points = np.linspace(0, 1, num_points)
        self.fields = np.zeros((num_fields, num_points))

    def set_initial_conditions(self, amplitudes):
        for i in range(self.num_fields):
            self.fields[i] = amplitudes[i] * np.sin((i + 1) * np.pi * self.points)

    def update(self, dt):
        for i in range(self.num_fields):
            self.fields[i] += dt * (np.random.rand(self.num_points) - 0.5)  # Random perturbation

    def simulate(self, total_time, dt):
        num_steps = int(total_time / dt)
        for step in range(num_steps):
            self.update(dt)
            self.plot(step)

    def plot(self, step):
        plt.clf()
        for i in range(self.num_fields):
            plt.plot(self.points, self.fields[i], label=f'Field {i + 1}')
        plt.title(f'Conformal Field Theory Simulation - Step {step}')
        plt.xlabel('Position')
        plt.ylabel('Field Value')
        plt.ylim(-2, 2)
        plt.legend()
        plt.pause(0.1)

if __name__ == '__main__':
    num_fields = 2
    amplitudes = np.random.rand(num_fields)  # Random amplitudes for each field
    cft = ConformalFieldTheory(num_fields=num_fields)
    cft.set_initial_conditions(amplitudes)
    plt.ion()
    cft.simulate(10, 0.01)
    plt.show()
